"use strict";

const db = require("./db");

const Orders = function (order) {
    this.sellerId = order.sellerId;
    this.buyerId = order.buyerId;
    this.status = order.status;
    this.orderTime = order.orderTime;
    this.paymentInfo = order.paymentInfo;
    this.totalPrice = order.totalPrice;
    this.taxes = order.taxes;
    this.shippingFee = order.shippingFee;
    this.finalTotalPay = order.finalTotalPay;
};

//create a new order
Orders.create = (newOrder, result) => {
    db.query("INSERT INTO orders SET ?", newOrder, (err, res) => {
        if (err) {
            console.log("error: ", err);
            result(err, null);
            return;
        } else {
            console.log("created order: ", { id: res.insertId, ...newOrder });
            result(null, { id: res.insertId, ...newOrder });
        }

    });
}

//get one order by id
Orders.findById = (id, result) => {

    db.query("SELECT * FROM orders WHERE id = ?", [id], (err, res) => {
        if (err) {
            console.log("error: ", err);
            result(err, null);
            return;
        } else {
            result(null, res);
            return;
        }
  
    });
};

//get one order by orderItem id
Orders.findByOrderItemId = (orderItemId, result) => {
    db.query("select o.* from orders as o join orderItems as oi on o.id=oi.orderId where oi.id = ?", orderItemId, (err, res) => {
        if (err) {
            console.log("error: ", err);
            result(err, null);
            return;
        } else {
            result(null, res);
            return;
        }
    })
}
  

//get all orders with filter generated by controller, statusFilter shoule be a boolean 
Orders.getAll = (sellerName, buyerName, statusFilter, result) => {
    
    

    let sql = "SELECT orders.*, u1.userName as sellerName, u2.userName as buyerName FROM orders join users as u1 on (orders.sellerId=u1.id and u1.role='seller') join users as u2 on (orders.buyerId=u2.id and u2.role='buyer')";
    let inserts = [];
    let filterStr="";
    if (sellerName) {
        filterStr = " WHERE u1.userName = ?";
        inserts.push(sellerName);
    };
    if (buyerName) {
        if (filterStr.length == 0) { filterStr = " WHERE u2.userName = ?"; }
        else { filterStr += " AND u2.userName = ?"; }
        inserts.push(buyerName);
    };
    if (statusFilter) {
        if (filterStr.length == 0) { filterStr = " WHERE status<>'unSubmitted' and status<>'BuyerConfirmed'"; }
        else { filterStr += " AND status<>'unSubmitted' and status<>'BuyerConfirmed'"; }
    }
    sql += filterStr;
    sql +=" order by u1.userName, u2.userName,status"
    let query = db.format(sql, inserts);
    console.log(query);


    db.query(query, (err, res) => {
        if (err) {
            console.log("error: ", err);
            result(err, null);
            return;
        };
        result(null, res);
    });
};



//update an order
Orders.updateById = (id, order, result) => {
    db.query(
        "UPDATE orders SET sellerId=?, buyerId=?, status=?, orderTime=?, paymentInfo=?, totalPrice=?, taxes=?, shippingFee=?, finalTotalPay=?, WHERE id = ?", [order.sellerId, order.buyerId, order.status, order.orderTime, order.paymentInfo, order.totalPrice, order.taxes, order.shippingFee, order.finalTotalPay, id],
        (err, res) => {
            if (err) {
                console.log("error: ", err);
                result(err, null);
                return;
            } else {
                console.log("updated order: ", { id: id, ...order });
                result(null, { id: id, ...order });
            }
        }
    );
}


//delete an order
Orders.remove = (id, result) => {
    db.query("DELETE FROM orders WHERE id = ?", id, (err, res) => {
        if (err) {
            console.log("error: ", err);
            result(err, null);
            return;
        } else {
            console.log("deleted order with id: ", id);
            result(null, res);
        }
    });
};
  

Orders.userPermitted=(id,userId, userRole, result)=> {
    let queryStr = "SELECT o.*, u1.userName as sellerName, u2.userName as buyerName FROM orders as o join users as u1 on (o.sellerId=u1.id and u1.role='seller') join users as u2 on (o.buyerId=u2.id and u2.role='buyer') where o.id= ?";
    let args = [id];
    switch (userRole) {
        case "buyer": {
            queryStr += " and o.buyerId = ?";
            args.push(userId);
            break;
        }
        case "seller": {
            queryStr += " and o.sellerId = ? and o.status <> 'unSubmitted' and o.status <> 'BuyerConfirmed'";
            args.push(userId);
            break;
        }
        case "admin": {
            queryStr += " and o.status <> 'unSubmitted' and o.status <> 'BuyerConfirmed'";
            break;
        }
        default: {
            result(new Error("user role error"), null);
        };
    }
    db.query(queryStr, args, (err, res) => {
        if (err) {
            console.log("error: ", err);
            result(err, null);
            return;
        } else {
            result(null, { permitted: (res.length == 0) ? false : true });
        }
    })
}


module.exports = Orders;