"use strict";

const db = require("./db");

const Orders = function (order) {
    this.sellerId = order.sellerId;
    this.buyerId = order.buyerId;
    this.status = order.status;
    this.orderTime = order.orderTime;
    this.paymentInfo = order.paymentInfo;
    this.totalPrice = order.totalPrice;
    this.taxes = order.taxes;
    this.shippingFee = order.shippingFee;
    this.finalTotalPay = order.finalTotalPay;
};

//create a new order
Orders.create = (newOrder, result) => {
    db.query("INSERT INTO orders SET ?", newOrder, (err, res) => {
        if (err) {
          console.log("error: ", err);
          result(err, null);
          return;
        }
        //console.log("created order: ", { id: res.insertId, ...newOrder });
        result(null, { id: res.insertId, ...newOrder });
      });
}

//get one order by id
Orders.findById = (id, result) => {

    db.query("SELECT * FROM orders WHERE id = ?", [id], (err, res) => {
        if (err) {
            console.log("error: ", err);
            result(err, null);
            return;
        }
  
        if (res.length) {
            console.log("found orders: ", res[0]);
            result(null, res[0]);
            return;
        }
        result({ kind: "not_found" }, null);
    });
};
  

//get all orders with filter generated by controller
Orders.getAll = (sellerName, buyerName, statusFilter, result) => {
    
    

    let sql = "SELECT orders.*, u1.userName as sellerName, u2.userName as buyerName FROM orders join users as u1 on (orders.sellerId=u1.id and u1.role='seller') join users as u2 on (orders.buyerId=u2.id and u2.role='buyer')";
    let inserts = [];
    let filterStr="";
    if (sellerName) {
        filterStr = " WHERE u1.userName = ?";
        inserts.push(sellerName);
    };
    if (buyerName) {
        if (filterStr.length == 0) { filterStr = " WHERE u2.userName = ?"; }
        else { filterStr += " AND u2.userName = ?"; }
        inserts.push(buyerName);
    };
    if (statusFilter) {
        if (filterStr.length == 0) { filterStr = " WHERE status<>'unSubmitted'"; }
        else { filterStr += " AND status<>'unSubmitted'"; }
    }
    sql += filterStr;
    sql +=" order by u1.userName, u2.userName,status"
    let query = db.format(sql, inserts);
    console.log(query);


    db.query(query, (err, res) => {
        if (err) {
            console.log("error: ", err);
            result(null, err);
            return;
        };
        result(null, res);
    });
};



//update an order
Orders.updateById = (id, order, result) => {
    db.query(
        "UPDATE orders SET sellerId=?, buyerId=?, status=?, orderTime=?, paymentInfo=?, totalPrice=?, taxes=?, shippingFee=?, finalTotalPay=?, WHERE id = ?", [order.sellerId, order.buyerId, order.status, order.orderTime, order.paymentInfo, order.totalPrice, order.taxes, order.shippingFee, order.finalTotalPay,id],
        (err, res) => {
            if (err) {
                console.log("error: ", err);
                result(null, err);
                return;
            }
            //problem affectedRows
            if (res.affectedRows == 0) {
                // not found order with the id
                result({ kind: "not_found" }, null);
                return;
            }
    
            console.log("updated order: ", { id: id, ...order });
            result(null, { id: id, ...order });
        }
    );
};


//delete an order
Orders.remove = (id, result) => {
    db.query("DELETE FROM orders WHERE id = ?", id, (err, res) => {
        if (err) {
            console.log("error: ", err);
            result(null, err);
            return;
        }
  
        if (res.affectedRows == 0) {
            // not found order with the id
            result({ kind: "not_found" }, null);
            return;
        }
  
        console.log("deleted order with id: ", id);
        result(null, res);
    });
};
  
module.exports = Orders;